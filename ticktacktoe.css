*,
html,
body {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Franklin Gothic Medium", "Arial Narrow", Arial, sans-serif;
}

body {
  height: 100%;
  width: 100%;
  background-color: slategray;
}

#container {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
}

#frame {
  margin: 100px auto;
  height: 500px;
  width: 500px;
  background-color: snow;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.row {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  height: 33%;
}

.split {
  height: 100%;
  width: 10px;
  background-color: steelblue;
}
[data-button] {
  display: flex;
  justify-items: center;
  align-items: center;
  background-color: teal;
  height: 150px;
  width: 150px;
  margin: auto;
  box-sizing: border-box;
}
[data-row1] {
  border-bottom: steelblue 10px solid;
  margin: 0;
}
[data-row2] {
  margin: 0;
  border-bottom: steelblue 10px solid;
}

/* thinking each play div act pretty much like a button , idea also is to creat like chess boast row and culumn where 
----there abc 123 a2, 3c, ect type of move this way can trach if there is a winnis play made ect...


thining for win would also have to know it for displaying line across if wanted to do that 
---can make one where it maps every possible solution, win or can maybe have it dynamic based on the orientation of winnig play
-----and for the actual cross line some thing on layer above all that way no issue with things crossing on page*/

/* winnig strickthrough style */
.testing {
  position: absolute;
  /* transform: rotate(45deg); */
  /* transform: rotate(-45deg); */
  /* transform: rotate(-0deg); */
  transform: rotate(90deg);
  z-index: 1;
  height: 10px;
  width: 550px;
  background-color: black;
  right: 85px;
  /* right: 255px; */
  /* right: 425px; */
  /* top: 510px; */
  top: 340px;
  /* top: 180px; */
}
/* made every possible combination for a win with the slash (though not resposive site just yet, laying out something that i would say is looking pretty good so far) */
/* above containg all properties and value to create all possible strike through's on board */

/* figure out how we'll get the x and o just the styling (how the appear on screen and which when we'll do later */

.display {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: auto;
}

/* adding these date point to each span will create the x for display
---they at start dont exist in the html only when (action they get applyied to the appropriet location)
-----then for new game looking ahead (have cheap ideal to reset, get it to refresh the page lul/other just reset remove all added) */
/* -------------------------------creates the x */

[data-x1] {
  position: relative;
  left: 5px;
  height: 10px;
  width: 140px;
  transform: rotate(-45deg);
  background-color: black;
}

[data-x2] {
  position: relative;
  right: 133px;
  height: 10px;
  width: 140px;
  transform: rotate(45deg);
  background-color: black;
}
/* -------------------------------creates the x */

/* here have our circle also based on a data point added to the first span only to display circle */
/* we just add these two data tags to same order span in each box
//--order does matter in spans withing box */
/* -------------------------------creates the circle */
[data-o1] {
  position: relative;
  border-radius: 100%;
  height: 140px;
  width: 140px;
  right: -5px;
  background-color: black;
}
[data-o2] {
  position: relative;
  border-radius: 100%;
  height: 120px;
  width: 120px;
  left: -125px;
  background-color: teal;
}
/* --------------------------creates the circle */

/* what else do we need here in css what else can we or do we need to add???????
  we have all the boxed , we have the grid, we have all circle and x to add to board
  we have all the strike through combination (work on making them all seperate)
  --should i set all seperate combinations or should i let that actual input then 
  ---determin what the class"strike through" shold be 
  -----one mean a can just add a class
  -----while the oher i have to assign several properties and remove them 
  //----though more classes ect... i think i just make all the combination up front its only like 8 i think
alright created all classes though some repetative i say ok for now 
//can clean up later , now gonna move onto the logic 
  */

/* diagonals */
.diagonal-a {
  transform: rotate(45deg);
  position: absolute;
  z-index: 1;
  height: 10px;
  width: 550px;
  background-color: black;
  top: 340px;
  right: 255px;
}
.diagonal-c {
  transform: rotate(-45deg);
  position: absolute;
  z-index: 1;
  height: 10px;
  width: 550px;
  background-color: black;
  top: 340px;
  right: 255px;
}
/* -------------diagonals */

/* horizontal */

.horizontal-a {
  transform: rotate(-0deg);
  position: absolute;
  z-index: 1;
  height: 10px;
  width: 550px;
  background-color: black;
  top: 180px;
  right: 255px;
}
.horizontal-b {
  transform: rotate(-0deg);
  position: absolute;
  z-index: 1;
  height: 10px;
  width: 550px;
  background-color: black;
  right: 255px;
  top: 340px;
}
.horizontal-c {
  transform: rotate(-0deg);
  position: absolute;
  z-index: 1;
  height: 10px;
  width: 550px;
  background-color: black;
  right: 255px;
  top: 510px;
}
/* -------------horizontal */

/* verticals */
.vertical-a {
  position: absolute;
  transform: rotate(90deg);
  z-index: 1;
  height: 10px;
  width: 550px;
  background-color: black;
  right: 425px;
}
.vertical-b {
  position: absolute;
  transform: rotate(90deg);
  z-index: 1;
  height: 10px;
  width: 550px;
  background-color: black;
  right: 255px;
}
.vertical-c {
  position: absolute;
  transform: rotate(90deg);
  z-index: 1;
  height: 10px;
  width: 550px;
  background-color: black;
  right: 85px;
}

/* -------------verticals */
